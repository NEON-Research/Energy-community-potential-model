title = "No-regret scenarios",
scene = list(
xaxis = list(title = "Total annual costs (€/household/year)", range = c(4500, 0)),
yaxis = list(title = "Overloaded transformers (#)"),
zaxis = list(title = "CO2-emissions (kton)")
)
)
# Create 3D scatterplot
plot_ly(my_data, y = ~Total.annual.costs, x = ~Overloaded.transformers, z = ~CO2.emissions,
type = "scatter3d", mode = "markers",
color = ~Heat.method, symbol = ~HasDSM, symbols = c(16,1)) %>%
layout(
title = "No-regret scenarios",
scene = list(
yaxis = list(title = "Total annual costs (€/household/year)", range = c(4500, 0)),
xaxis = list(title = "Overloaded transformers (#)"),
zaxis = list(title = "CO2-emissions (kton)")
)
)
# Create 3D scatterplot
plot_ly(my_data, x = ~Total.annual.costs, y = ~Overloaded.transformers, z = ~CO2.emissions,
type = "scatter3d", mode = "markers",
color = ~Heat.method, symbol = ~HasDSM, symbols = c(16,1)) %>%
layout(
title = "No-regret scenarios",
scene = list(
xaxis = list(title = "Total annual costs (€/household/year)", range = c(4500, 1500)),
yaxis = list(title = "Overloaded transformers (#)"),
zaxis = list(title = "CO2-emissions (kton)")
)
)
# Create 3D scatterplot
plot_ly(my_data, x = ~Total.annual.costs, y = ~Overloaded.transformers, z = ~CO2.emissions,
type = "scatter3d", mode = "markers",
color = ~Heat.method)%>% #, symbol = ~HasDSM, symbols = c(16,1)) %>%
layout(
title = "No-regret scenarios",
scene = list(
xaxis = list(title = "Total annual costs (€/household/year)", range = c(4500, 1500)),
yaxis = list(title = "Overloaded transformers (#)"),
zaxis = list(title = "CO2-emissions (kton)")
)
)
# Create 3D scatterplot
plot_ly(my_data, x = ~Total.annual.costs, y = ~Overloaded.transformers, z = ~CO2.emissions,
type = "scatter3d", mode = "markers",
symbol = ~HasDSM, symbols = c(16,1)) %>%
layout(
title = "No-regret scenarios",
scene = list(
xaxis = list(title = "Total annual costs (€/household/year)", range = c(4500, 1500)),
yaxis = list(title = "Overloaded transformers (#)"),
zaxis = list(title = "CO2-emissions (kton)")
)
)
# Check the default font
default_font <- plot$layout$font$family
# Create a simple plot
plot <- plot_ly(x = 1:10, y = 1:10, type = "scatter", mode = "markers")
# Set the default font in the layout
plot <- plot %>% layout(font = list(family = "Arial"))
# Check the default font
default_font <- plot$layout$font$family
print(default_font)
# Create 3D scatterplot
plot_ly(my_data, x = ~Total.annual.costs, y = ~Overloaded.transformers, z = ~CO2.emissions,
type = "scatter3d", mode = "markers",
color ~= Heat.method) %>% # symbol = ~HasDSM, symbols = c(16,1)) %>%
# Create 3D scatterplot
plot_ly(my_data, x = ~Total.annual.costs, y = ~Overloaded.transformers, z = ~CO2.emissions,
type = "scatter3d", mode = "markers",
color = ~Heat.method) %>% # symbol = ~HasDSM, symbols = c(16,1)) %>%
layout(
title = "No-regret scenarios",
scene = list(
xaxis = list(title = "Total annual costs (€/household/year)", range = c(4500, 1500)),
yaxis = list(title = "Overloaded transformers (#)"),
zaxis = list(title = "CO2-emissions (kton)")
)
)
# Create 3D scatterplot
plot_ly(my_data, x = ~Total.annual.costs, y = ~Overloaded.transformers, z = ~CO2.emissions,
type = "scatter3d", mode = "markers",
color = ~Heat.method) %>% # symbol = ~HasDSM, symbols = c(16,1)) %>%
layout(
title = "Scenario overview",
scene = list(
xaxis = list(title = "Total annual costs (€/household/year)", range = c(4500, 1500)),
yaxis = list(title = "Overloaded transformers (#)"),
zaxis = list(title = "CO2-emissions (kton)")
)
)
load("C:/Users/s124129/TU Eindhoven/NEON - Documenten/WP10 - Integral models/Naud Loomans/Paper IIASA energy communities/dataverse_files/01_2022_ENBP_inventory.ttl")
install.packages("rdflib")
library(rdflib)
# Print the RDF graph
print(rdf_graph)
Print the RDF graph
# Print the RDF graph
## print(rdf_graph)
#Read the Turtle file
rdf_graph <- rdf_parse("C:\Users\s124129\TU Eindhoven\NEON - Documenten\WP10 - Integral models\Naud Loomans\Paper IIASA energy communities\dataverse_files\01_2022_ENBP_inventory.ttl", format = "turtle")
library(rdflib)
#Read the Turtle file
rdf_graph <- rdf_parse("C:\Users\s124129\TU Eindhoven\NEON - Documenten\WP10 - Integral models\Naud Loomans\Paper IIASA energy communities\dataverse_files\01_2022_ENBP_inventory.ttl", format = "turtle")
#Read the Turtle file
rdf_graph <- rdf_parse("C:\\Users\\s124129\\TU Eindhoven\\NEON - Documenten\\WP10 - Integral models\\Naud Loomans\\Paper IIASA energy communities\\dataverse_files\\01_2022_ENBP_inventory.ttl", format = "turtle")
library(rdflib)
#Read the Turtle file
rdf_graph <- rdf_parse("C:\\Users\\s124129\\TU Eindhoven\\NEON - Documenten\\WP10 - Integral models\\Naud Loomans\\Paper IIASA energy communities\\dataverse_files\\01_2022_ENBP_inventory.ttl", format = "turtle")
library(rdflib)
#Read the Turtle file
rdf_graph <- rdf_parse("C:\\Users\\s124129\\TU Eindhoven\\NEON - Documenten\\WP10 - Integral models\\Naud Loomans\\Paper IIASA energy communities\\dataverse_files\\01_2022_ENBP_inventory.ttl", format = "turtle")
library(rdflib)
#Read the Turtle file
rdf_graph <- rdf_parse("C:\\Users\\s124129\\TU Eindhoven\\NEON - Documenten\\WP10 - Integral models\\Naud Loomans\\Paper IIASA energy communities\\dataverse_files\\01_2022_ENBP_inventory.ttl", format = "turtle")
#Read the Turtle file
rdf_graph <- rdf_parse("C:\\Users\\s124129\\TU Eindhoven\\NEON - Documenten\\WP10 - Integral models\\Naud Loomans\\Paper IIASA energy communities\\dataverse_files\\01_2022_ENBP_inventory.ttl", format = "turtle")
#Read the Turtle file
#rdf_graph <- rdf_parse("C:\\Users\\s124129\\TU Eindhoven\\NEON - Documenten\\WP10 - Integral models\\Naud Loomans\\Paper IIASA energy communities\\dataverse_files\\01_2022_ENBP_inventory.ttl", format = "turtle")
rdf_graph <- rdf_parse("C:\\Users\\s124129\\TU Eindhoven\\NEON - Documenten\\WP10 - Integral models\\Naud Loomans\\Paper IIASA energy communities\\dataverse_files\\test.ttl", format = "turtle")
# Print the RDF graph
print(rdf_graph)
#Query the RDF data
query <- '
PREFIX dc: <http://purl.org/dc/elements/1.1/>
SELECT ?subject ?title
WHERE {
?subject dc:title ?title .
}'
result <- rdf_query(rdf_graph, query)
# Print the query results
print(result)
# Print the query results
print(result)
View(plot)
View(plot)
View(my_data)
# Load libraries
library(readxl)
library(dplyr)
library(ggplot2)
library(scales)
# Load the Excel file from the specified folder
setwd("C:\\Users\\s124129\\Documents\\GitHub\\Energy-community-potential-model\\Energy community potential model")
file_path <- "results_monte_carlo_v2.xlsx"
##----ENERGY COMMUNITIES----
# Read the Excel file (reading the first sheet by default)
data <- read_excel(file_path)
data_scenario1 <- read_excel(file_path, sheet = "baseCase_ECs")
data_scenario2 <- read_excel(file_path, sheet = "highContagion_ECs")
data_scenario3 <- read_excel(file_path, sheet = "highProf_ECs")
data_scenario4 <- read_excel(file_path, sheet = "combined_ECs")
# Set historic data frame
file_path_historic <- "_EC_summary.xlsx"
historical_data  <- read_excel(file_path_historic, sheet = "calibration_statistics")
# Extract the years column
years <- data_scenario1[[1]]
# Exclude the first column (years) from the data for calculations
data_without_years_scen1 <- data_scenario1[,-1]
data_without_years_scen2 <- data_scenario2[,-1]
data_without_years_scen3 <- data_scenario3[,-1]
data_without_years_scen4 <- data_scenario4[,-1]
# Function to compute mean and confidence intervals (80%)
get_mean_and_ci <- function(df) {
mean_vals <- rowMeans(df)  # Calculate mean for each time point
lower_ci <- apply(df, 1, function(x) quantile(x, probs = 0.10))  # 10th percentile
upper_ci <- apply(df, 1, function(x) quantile(x, probs = 0.90))  # 90th percentile
return(data.frame(mean = mean_vals, lower = lower_ci, upper = upper_ci))
}
# Calculate mean and confidence intervals for each scenario
scenario1_stats <- get_mean_and_ci(data_without_years_scen1)
scenario2_stats <- get_mean_and_ci(data_without_years_scen2)
scenario3_stats <- get_mean_and_ci(data_without_years_scen3)
scenario4_stats <- get_mean_and_ci(data_without_years_scen4)
# Add the years column to each scenario data frame
scenario1_stats$Year <- years
scenario2_stats$Year <- years
scenario3_stats$Year <- years
scenario4_stats$Year <- years
# Label the scenarios
scenario1_stats$scenario <- "Base line"
scenario2_stats$scenario <- "High contagion"
scenario3_stats$scenario <- "High professionalization"
scenario4_stats$scenario <- "Combined policies"
# Combine all data into a single data frame for plotting
all_scenarios <- bind_rows(scenario1_stats, scenario2_stats, scenario3_stats, scenario4_stats)
# Step 4: Plot using ggplot2
ggplot(all_scenarios, aes(x = Year, y = mean, color = scenario)) +
geom_line(linewidth = 1.2) +  # Main line for the mean
geom_ribbon(aes(ymin = lower, ymax = upper, fill = scenario), alpha = 0.12, color = NA) +  # Shaded area for confidence intervals
labs(title = "Energy communities",
x = "Year", y = "Value",
color = "Scenario", fill = "Scenario") +
ylab("ECs (#)") +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))  # Center-align the title
# GET INTERQUARTILE RANGE (IQR) AND MEDIAN
# Function to compute median and interquartile range (IQR)
get_median_and_iqr <- function(df) {
median_vals <- apply(df, 1, median)  # Calculate median for each time point
lower_iqr <- apply(df, 1, function(x) quantile(x, probs = 0.25))  # 25th percentile
upper_iqr <- apply(df, 1, function(x) quantile(x, probs = 0.75))  # 75th percentile
return(data.frame(median = median_vals, lower = lower_iqr, upper = upper_iqr))
}
# Calculate median and IQR for each scenario
scenario1_stats <- get_median_and_iqr(data_without_years_scen1)
scenario2_stats <- get_median_and_iqr(data_without_years_scen2)
scenario3_stats <- get_median_and_iqr(data_without_years_scen3)
scenario4_stats <- get_median_and_iqr(data_without_years_scen4)
# Add the years column to each scenario data frame
scenario1_stats$Year <- years
scenario2_stats$Year <- years
scenario3_stats$Year <- years
scenario4_stats$Year <- years
# Label the scenarios
scenario1_stats$scenario <- "Base line"
scenario2_stats$scenario <- "High contagion"
scenario3_stats$scenario <- "High professionalization"
scenario4_stats$scenario <- "Combined policies"
# Combine all data into a single data frame for plotting
all_scenarios <- bind_rows(scenario1_stats, scenario2_stats, scenario3_stats, scenario4_stats)
# Plot using ggplot2
ggplot(all_scenarios, aes(x = Year, y = median, color = scenario)) +
geom_line(linewidth = 1.2) +  # Main line for the median
geom_ribbon(aes(ymin = lower, ymax = upper, fill = scenario), alpha = 0.12, color = NA) +  # Shaded area for IQR
labs(title = "Energy communities",
x = "Year", y = "Value",
color = "Scenario", fill = "Scenario") +
ylab("ECs (#)") +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))  # Center-align the title
##----EC PROJECTS----
data_scenario1 <- read_excel(file_path, sheet = "baseCase_projects")
data_scenario2 <- read_excel(file_path, sheet = "highContagion_projects")
data_scenario3 <- read_excel(file_path, sheet = "highProf_projects")
data_scenario4 <- read_excel(file_path, sheet = "combined_projects")
# Set historic data frame
file_path_historic <- "_EC_summary.xlsx"
historical_data  <- read_excel(file_path_historic, sheet = "calibration_statistics")
# Extract the years column
years <- data_scenario1[[1]]
# Exclude the first column (years) from the data for calculations
data_without_years_scen1 <- data_scenario1[,-1]
data_without_years_scen2 <- data_scenario2[,-1]
data_without_years_scen3 <- data_scenario3[,-1]
data_without_years_scen4 <- data_scenario4[,-1]
# Function to compute mean and confidence intervals (80%)
get_mean_and_ci <- function(df) {
mean_vals <- rowMeans(df)  # Calculate mean for each time point
lower_ci <- apply(df, 1, function(x) quantile(x, probs = 0.10))  # 10th percentile
upper_ci <- apply(df, 1, function(x) quantile(x, probs = 0.90))  # 90th percentile
return(data.frame(mean = mean_vals, lower = lower_ci, upper = upper_ci))
}
# Calculate mean and confidence intervals for each scenario
scenario1_stats <- get_mean_and_ci(data_without_years_scen1)
scenario2_stats <- get_mean_and_ci(data_without_years_scen2)
scenario3_stats <- get_mean_and_ci(data_without_years_scen3)
scenario4_stats <- get_mean_and_ci(data_without_years_scen4)
# Add the years column to each scenario data frame
scenario1_stats$Year <- years
scenario2_stats$Year <- years
scenario3_stats$Year <- years
scenario4_stats$Year <- years
# Label the scenarios
scenario1_stats$scenario <- "Base line"
scenario2_stats$scenario <- "High contagion"
scenario3_stats$scenario <- "High professionalization"
scenario4_stats$scenario <- "Combined policies"
# Combine all data into a single data frame for plotting
all_scenarios <- bind_rows(scenario1_stats, scenario2_stats, scenario3_stats, scenario4_stats)
# Step 4: Plot using ggplot2
ggplot(all_scenarios, aes(x = Year, y = mean, color = scenario)) +
geom_line(linewidth = 1.2) +  # Main line for the mean
geom_ribbon(aes(ymin = lower, ymax = upper, fill = scenario), alpha = 0.12, color = NA) +  # Shaded area for confidence intervals
labs(title = "Energy community projects",
x = "Year", y = "Value",
color = "Scenario", fill = "Scenario") +
ylab("EC Projects (#)") +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))  # Center-align the title
# GET INTERQUARTILE RANGE (IQR) AND MEDIAN
# Function to compute median and interquartile range (IQR)
get_median_and_iqr <- function(df) {
median_vals <- apply(df, 1, median)  # Calculate median for each time point
lower_iqr <- apply(df, 1, function(x) quantile(x, probs = 0.25))  # 25th percentile
upper_iqr <- apply(df, 1, function(x) quantile(x, probs = 0.75))  # 75th percentile
return(data.frame(median = median_vals, lower = lower_iqr, upper = upper_iqr))
}
# Calculate median and IQR for each scenario
scenario1_stats <- get_median_and_iqr(data_without_years_scen1)
scenario2_stats <- get_median_and_iqr(data_without_years_scen2)
scenario3_stats <- get_median_and_iqr(data_without_years_scen3)
scenario4_stats <- get_median_and_iqr(data_without_years_scen4)
# Add the years column to each scenario data frame
scenario1_stats$Year <- years
scenario2_stats$Year <- years
scenario3_stats$Year <- years
scenario4_stats$Year <- years
# Label the scenarios
scenario1_stats$scenario <- "Base line"
scenario2_stats$scenario <- "High contagion"
scenario3_stats$scenario <- "High professionalization"
scenario4_stats$scenario <- "Combined policies"
# Combine all data into a single data frame for plotting
all_scenarios <- bind_rows(scenario1_stats, scenario2_stats, scenario3_stats, scenario4_stats)
# Plot using ggplot2
ggplot(all_scenarios, aes(x = Year, y = median, color = scenario)) +
geom_line(linewidth = 1.2) +  # Main line for the median
geom_ribbon(aes(ymin = lower, ymax = upper, fill = scenario), alpha = 0.12, color = NA) +  # Shaded area for IQR
labs(title = "Energy community projects",
x = "Year", y = "Value",
color = "Scenario", fill = "Scenario") +
ylab("EC Projects (#)") +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))  # Center-align the title
#----EC MEMBERS-----
data_scenario1 <- read_excel(file_path, sheet = "baseCase_projects")
data_scenario2 <- read_excel(file_path, sheet = "highContagion_projects")
data_scenario3 <- read_excel(file_path, sheet = "highProf_projects")
data_scenario4 <- read_excel(file_path, sheet = "combined_projects")
# Set historic data frame
file_path_historic <- "_EC_summary.xlsx"
historical_data  <- read_excel(file_path_historic, sheet = "calibration_statistics")
# Extract the years column
years <- data_scenario1[[1]]
# Exclude the first column (years) from the data for calculations
data_without_years_scen1 <- data_scenario1[,-1]
data_without_years_scen2 <- data_scenario2[,-1]
data_without_years_scen3 <- data_scenario3[,-1]
data_without_years_scen4 <- data_scenario4[,-1]
# Multiply to get percentage of households
data_without_years_scen1 <- data_without_years_scen1*99/302660*100
data_without_years_scen2 <- data_without_years_scen2*99/302660*100
data_without_years_scen3 <- data_without_years_scen3*99/302660*100
data_without_years_scen4 <- data_without_years_scen4*99/302660*100
# Function to compute mean and confidence intervals (80%)
get_mean_and_ci <- function(df) {
mean_vals <- rowMeans(df)  # Calculate mean for each time point
lower_ci <- apply(df, 1, function(x) quantile(x, probs = 0.10))  # 10th percentile
upper_ci <- apply(df, 1, function(x) quantile(x, probs = 0.90))  # 90th percentile
return(data.frame(mean = mean_vals, lower = lower_ci, upper = upper_ci))
}
# Calculate mean and confidence intervals for each scenario
scenario1_stats <- get_mean_and_ci(data_without_years_scen1)
scenario2_stats <- get_mean_and_ci(data_without_years_scen2)
scenario3_stats <- get_mean_and_ci(data_without_years_scen3)
scenario4_stats <- get_mean_and_ci(data_without_years_scen4)
# Add the years column to each scenario data frame
scenario1_stats$Year <- years
scenario2_stats$Year <- years
scenario3_stats$Year <- years
scenario4_stats$Year <- years
# Label the scenarios
scenario1_stats$scenario <- "Base line"
scenario2_stats$scenario <- "High contagion"
scenario3_stats$scenario <- "High professionalization"
scenario4_stats$scenario <- "Combined policies"
# Combine all data into a single data frame for plotting
all_scenarios <- bind_rows(scenario1_stats, scenario2_stats, scenario3_stats, scenario4_stats)
# Step 4: Plot using ggplot2
ggplot(all_scenarios, aes(x = Year, y = mean, color = scenario)) +
geom_line(linewidth = 1.2) +  # Main line for the mean
geom_ribbon(aes(ymin = lower, ymax = upper, fill = scenario), alpha = 0.12, color = NA) +  # Shaded area for confidence intervals
labs(title = "Share of EC members",
x = "Year", y = "Value",
color = "Scenario", fill = "Scenario") +
ylab("Members (%)") +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))+  # Center-align the title
scale_y_continuous(labels = percent)  # Add percentage signs to y-axis labels
# GET INTERQUARTILE RANGE (IQR) AND MEDIAN
# Function to compute median and interquartile range (IQR)
get_median_and_iqr <- function(df) {
median_vals <- apply(df, 1, median)  # Calculate median for each time point
lower_iqr <- apply(df, 1, function(x) quantile(x, probs = 0.25))  # 25th percentile
upper_iqr <- apply(df, 1, function(x) quantile(x, probs = 0.75))  # 75th percentile
return(data.frame(median = median_vals, lower = lower_iqr, upper = upper_iqr))
}
# Calculate median and IQR for each scenario
scenario1_stats <- get_median_and_iqr(data_without_years_scen1)
scenario2_stats <- get_median_and_iqr(data_without_years_scen2)
scenario3_stats <- get_median_and_iqr(data_without_years_scen3)
scenario4_stats <- get_median_and_iqr(data_without_years_scen4)
# Add the years column to each scenario data frame
scenario1_stats$Year <- years
scenario2_stats$Year <- years
scenario3_stats$Year <- years
scenario4_stats$Year <- years
# Label the scenarios
scenario1_stats$scenario <- "Base line"
scenario2_stats$scenario <- "High contagion"
scenario3_stats$scenario <- "High professionalization"
scenario4_stats$scenario <- "Combined policies"
# Combine all data into a single data frame for plotting
all_scenarios <- bind_rows(scenario1_stats, scenario2_stats, scenario3_stats, scenario4_stats)
# Plot using ggplot2
ggplot(all_scenarios, aes(x = Year, y = median, color = scenario)) +
geom_line(linewidth = 1.2) +  # Main line for the median
geom_ribbon(aes(ymin = lower, ymax = upper, fill = scenario), alpha = 0.12, color = NA) +  # Shaded area for IQR
labs(title = "Share of EC members",
x = "Year", y = "Value",
color = "Scenario", fill = "Scenario") +
ylab("Members (%)") +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5)) +  # Center-align the title
scale_y_continuous(labels = percent)  # Add percentage signs to y-axis labels
#----INSTALLED CAPACITY-----
data_scenario1 <- read_excel(file_path, sheet = "baseCase_projects")
data_scenario2 <- read_excel(file_path, sheet = "highContagion_projects")
data_scenario3 <- read_excel(file_path, sheet = "highProf_projects")
data_scenario4 <- read_excel(file_path, sheet = "combined_projects")
# Set historic data frame
file_path_historic <- "_EC_summary.xlsx"
historical_data  <- read_excel(file_path_historic, sheet = "calibration_statistics")
# Extract the years column
years <- data_scenario1[[1]]
# Exclude the first column (years) from the data for calculations
data_without_years_scen1 <- data_scenario1[,-1]
data_without_years_scen2 <- data_scenario2[,-1]
data_without_years_scen3 <- data_scenario3[,-1]
data_without_years_scen4 <- data_scenario4[,-1]
# Multiply to get percentage of households
data_without_years_scen1 <- data_without_years_scen1*518 / 1000
data_without_years_scen2 <- data_without_years_scen2*518 / 1000
data_without_years_scen3 <- data_without_years_scen3*518 / 1000
data_without_years_scen4 <- data_without_years_scen4*518 / 1000
# Function to compute mean and confidence intervals (80%)
get_mean_and_ci <- function(df) {
mean_vals <- rowMeans(df)  # Calculate mean for each time point
lower_ci <- apply(df, 1, function(x) quantile(x, probs = 0.10))  # 10th percentile
upper_ci <- apply(df, 1, function(x) quantile(x, probs = 0.90))  # 90th percentile
return(data.frame(mean = mean_vals, lower = lower_ci, upper = upper_ci))
}
# Calculate mean and confidence intervals for each scenario
scenario1_stats <- get_mean_and_ci(data_without_years_scen1)
scenario2_stats <- get_mean_and_ci(data_without_years_scen2)
scenario3_stats <- get_mean_and_ci(data_without_years_scen3)
scenario4_stats <- get_mean_and_ci(data_without_years_scen4)
# Add the years column to each scenario data frame
scenario1_stats$Year <- years
scenario2_stats$Year <- years
scenario3_stats$Year <- years
scenario4_stats$Year <- years
# Label the scenarios
scenario1_stats$scenario <- "Base line"
scenario2_stats$scenario <- "High contagion"
scenario3_stats$scenario <- "High professionalization"
scenario4_stats$scenario <- "Combined policies"
# Combine all data into a single data frame for plotting
all_scenarios <- bind_rows(scenario1_stats, scenario2_stats, scenario3_stats, scenario4_stats)
historical_data <- data.frame(
Year = 2010:2019,
median = c(10, 12, 15, 18, 20, 22, 25, 28, 30, 32),
scenario = "Historical"
)
# Combine historical data with simulation data
combined_data <- rbind(historical_data, all_scenarios)
scenario1_data_filtered <-subset(scenario1_stats, year >=2023)
# Load libraries
library(readxl)
library(dplyr)
library(ggplot2)
library(scales)
# Load the Excel file from the specified folder
setwd("C:\\Users\\s124129\\Documents\\GitHub\\Energy-community-potential-model\\Energy community potential model")
file_path <- "results_monte_carlo_v2.xlsx"
##----ENERGY COMMUNITIES----
# Read the Excel file (reading the first sheet by default)
data <- read_excel(file_path)
#----INSTALLED CAPACITY-----
data_scenario1 <- read_excel(file_path, sheet = "baseCase_projects")
data_scenario2 <- read_excel(file_path, sheet = "highContagion_projects")
data_scenario3 <- read_excel(file_path, sheet = "highProf_projects")
data_scenario4 <- read_excel(file_path, sheet = "combined_projects")
# Set historic data frame
file_path_historic <- "_EC_summary.xlsx"
historical_data  <- read_excel(file_path_historic, sheet = "calibration_statistics")
# Extract the years column
years <- data_scenario1[[1]]
# Exclude the first column (years) from the data for calculations
data_without_years_scen1 <- data_scenario1[,-1]
data_without_years_scen2 <- data_scenario2[,-1]
data_without_years_scen3 <- data_scenario3[,-1]
data_without_years_scen4 <- data_scenario4[,-1]
# Multiply to get percentage of households
data_without_years_scen1 <- data_without_years_scen1*518 / 1000
data_without_years_scen2 <- data_without_years_scen2*518 / 1000
data_without_years_scen3 <- data_without_years_scen3*518 / 1000
data_without_years_scen4 <- data_without_years_scen4*518 / 1000
# Filter scenario data to start from 2023
data_scenario1_filtered <- subset(data_scenario1, Year >= 2023)
# Filter scenario data to start from 2023
data_scenario1_filtered <- subset(data_scenario1, year >= 2023)
data_scenario2_filtered <- subset(data_scenario2, year >= 2023)
data_scenario3_filtered <- subset(data_scenario3, year >= 2023)
data_scenario4_filtered <- subset(data_scenario4, year >= 2023)
# GET INTERQUARTILE RANGE (IQR) AND MEDIAN
# Function to compute median and interquartile range (IQR)
get_median_and_iqr <- function(df) {
median_vals <- apply(df, 1, median)  # Calculate median for each time point
lower_iqr <- apply(df, 1, function(x) quantile(x, probs = 0.25))  # 25th percentile
upper_iqr <- apply(df, 1, function(x) quantile(x, probs = 0.75))  # 75th percentile
return(data.frame(median = median_vals, lower = lower_iqr, upper = upper_iqr))
}
View(historical_data)
